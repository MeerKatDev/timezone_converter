<style>
  a {
    cursor: pointer;

  }
</style>
<section class="phx-hero">
  <p>Enter time</p>
  <input id="current_time" name="current_time" />
  <p style="text-align: right;"><a onclick="useCurrentTime()">Use current time</a></p>

  <p>My timezones</p>
  <table>
    <thead>
      <tr>
        <th>City</th>
        <th>Time</th>
        <th>Timezone</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
  <p>City name</p>
  <input id="new_city_name" name="new_city_name" list="timezones" />
  <button onclick="addRow()" type="button">ADD</button>
</section>

<datalist id="timezones">
  <%= for item <- @timezones do %>
  <option value={item.name} />
  <% end %>
</datalist>
<script type="text/javascript">
var offsetsDatabase;
var placeholderInterval;
const currentTime = document.getElementById('current_time');

// Time.to_string(Time.utc_now())
function setPlaceholder() {
  if(currentTime.placeholder !== getTime())
    currentTime.placeholder = getTime();
}

function setValue() {
  if(currentTime.value !== getTime())
    currentTime.value = getTime();
  handleOtherTimezones();
}

function offsetTime(time, offset) {
  const [hh, mm, ss] = time.split(":");
  const timeEpoch = new Date().setHours(parseInt(hh), parseInt(mm), parseInt(ss));
  return new Date(timeEpoch + 3600000 * offset).toLocaleTimeString();
}

// would be better to attach an observer to
// we're in -1 now
function handleOtherTimezones() {
  const rows = document.querySelector('table > tbody').children;
  [].slice.call(rows).forEach(el => {
    const {isdst, offset} = el.children[2].dataset;
    const totalOffset = parseFloat(offset) + new Date().getTimezoneOffset()/60 + (isdst == "true" ? -1 : 0);
    el.children[1].innerHTML = offsetTime(getTime(), totalOffset);
  });
}

function useCurrentTime() {
  clearTimeout(placeholderInterval);
  setInterval(setValue, 200);
}

function findByTimezoneName(elem, tzName) {
  return elem.utc.includes(tzName) || elem.text.includes(tzName.split('/')[1]);
}

function addRow() {
  const newTimezoneName = document.getElementById("new_city_name").value;
  const { text, offset, isdst } = offsetsDatabase.find((e) => findByTimezoneName(e, newTimezoneName)) || {"text":"(UTC+00:00)", "offset":0.0, "isdst": false};
  var gmtZone = /\(([^)]+)\)/.exec(text)[1].slice(3);
  if (gmtZone == "")
    gmtZone = "+00:00";

  document
    .querySelector('table > tbody')
    .innerHTML += '<td>' + newTimezoneName + '</td><td></td><td data-offset="' + offset + '" data-isdst="' + isdst + '">' + gmtZone + '</td><td><a onclick="deleteRow(this)">&#10060;</a></td>';
}

function deleteRow(e) {
  e.parentElement.parentElement.remove();
}

function getTime() {
  return new Date().toLocaleTimeString();
}

function fetchOffsets(callback) {
  fetch("https://raw.githubusercontent.com/dmfilipenko/timezones.json/master/timezones.json")
     .then(response => response.json())
     .then(json => callback(null, json))
     .catch(error => callback(error, null))
}

// main zone
setPlaceholder();
placeholderInterval = setInterval(setPlaceholder, 200);
fetchOffsets((err, data) => {
  err ? console.error(err) : (offsetsDatabase = data);
});

</script>